> install.packages("swirl")
install.packages("swirl")
library("swirl")
install_course("R Programming")
main
R Programming
library("swirl")
swirl()
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt<-sqrt(z-1)
skip()
my_div<-z/my_sqrt
skip()
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
bye
bye()
library(swirl)
swirl()
swirl()
rbinom(1, size = 100, prob = 0.7)
flips2<-sample(1, size = 100, prob = 0.7)
flips2<-sample.int(1, size = 100, prob = 0.7, replace = TRUE)
flips2<-rbinom(100, size= 1, prob = 0.7)
flips2
sum(flips2)
rnorm()
?rnorm
rnorm(10)
rnorm(10, mean=100, sd=25)
rpois(5, mean = 10)
?rpois
rpois(5,10)
replicate(100, rpois(5, 10))
my_pois <- replicate(100, rpois(5, 10))
my_poiss
my_poiss
my_pois
cm<-colMeans(my_pois)
hist(cm)
d1<-Sys.Date()
class(d1)
unclass(d1)
d1
d2<-as.Date("1960-01-01")
d2 <- as.Date("1969-01-01")
unclass(d2)
Sys.time()
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
as.POSIXlt(Sys.time())
t2 <- as.POSIXlt(Sys.time())
t2
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays()
weekdays(d1)
months(t1)
quarters(t2)
t3<-strptime("October 17, 1986 08:24")
t3<- strptime
t3<-strptime("October 17,1986 08:24")
skip9
skip()
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data9cars
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = speed, y = distance)
plot(cars,x = speed, y = distance)
skip()
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist, xlab = Speed)
plot(x = cars$speed, y = cars$dist, xlab = cars$speed)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance", main = "My Plot")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col=2)
plot(cars, xlim = c(10,15))
plot(cars, pch = 2)
mtcars
data(mtcars)
?boxplot()
?boxplot
boxplot(x=mpg$mtcars, y=cyl$mtcars)
skip()
hist(mtcars$mpg)
bye()
swirl()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
bye()
knitr::opts_chunk$set(echo = TRUE)
#violinplot
ggplot(data=P, mapping=aes(x=species, y=flipper_length_mm))+
#geom_point()
geom_violin()+geom_jitter(width=0.1, height=0)
library(ggplot2)
#violinplot
ggplot(data=P, mapping=aes(x=species, y=flipper_length_mm))+
#geom_point()
geom_violin()+geom_jitter(width=0.1, height=0)
install.packages("palmerpenguins")
#put it into the library or load it into R environment
library(palmerpenguins)
#to see if it worked try to access something in the library (penguins data set for example)
penguins
#assign a variable to penguins so that you don't have to type it everytime
P<-penguins
#how to get a summary of your data set...how many different types of penguins?? (this is a tidy data set which means each row is a single observation...dream is written for every single penguin observed)
install.packages("tidyverse")
library(tidyverse)
#what if you data is in an excel sheet or csv...use read.csv("the pathway")
#what do we have in our date set...what type of factors???
glimpse(P)
#or
str(P)
#computer will store the categories as integers adelie=1, chinstrap=2 and so on...if you want to alter the order you may get some really weird errors
#graphing the data, aes means aesthetics, geom_point is the graph type, geom_jitter() spreads out the dots
ggplot(data=P, mapping=aes(x=species, y=flipper_length_mm))+geom_point()
#box and whisker plot (geom_boxplot()) with a little bit of scatter
ggplot(data=P, mapping=aes(x=species, y=flipper_length_mm))+
#+geom_point()
geom_boxplot()+geom_jitter(width=0.1, height=0)
#violinplot
ggplot(data=P, mapping=aes(x=species, y=flipper_length_mm))+
#geom_point()
geom_violin()+geom_jitter(width=0.1, height=0)
#adding labels and title
ggplot(data=P, mapping=aes(x=species, y=flipper_length_mm))+
#geom_point()
geom_boxplot(aes(fill=species))+geom_jitter(width=0.1, height=0, alpha=0.1) +labs(title="Flipper length be Species") +theme_minimal()
#adding labels and title
ggplot(data=P, mapping=aes(x=species, y=flipper_length_mm))+
#geom_point()
geom_boxplot(aes(fill=species))+geom_jitter(width=0.1, height=0, alpha=0.1) +labs(title="Flipper length by Species") +theme_minimal()
library(tidyverse)
y <- c(10,17,21)
A <- c("a", "b", "c")
data.frame(1:3, y, A)
x <- c(1:3)
data.frame(x, y, A)
tibble(x,y,A)
wd
setwd
dir
library(data.table)
library(plyr)
library(readr)
wd <- "/Users/madi_mitchell/Desktop/uav_flood_analysis/Data/2021_Rollins5"
# Indices file name
x <- "210622_Rollins5_Indices_newbands.csv"
# column and row info from excel
m <- "Rollins_Field_Map_NEW.csv"
#name for the final data csv to be exported to wd
a <- "210622_Rollins5_Indices_newbands.csv"
setwd(wd)
# bring in the csv files
DF1 <- read.csv(a)
setwd("/Users/madi_mitchell/Desktop/uav_flood_analysis/Data/2021_Rollins5")
# Indices file name
x <- "210622_Indices_newbands.csv"
#name for the final data csv to be exported to wd
a <- "210622_Indices_newbands.csv"
# bring in the csv files
DF1 <- read.csv(a)
#DF2 <- read.csv(x)
DF3 <- read.csv(m)
#make the names uniform so that they can be properly merged
names(DF3)[names(DF3) == 'MOplot'] <- 'PlotID'
#names(DF2)[names(DF2) == 'NDVI'] <- 'NDVI_pix4d'
#merge...you can only do two at a time
AllDATA <- merge(DF1, DF3, by = "PlotID")
AllDATA
#select only the wanted columns of data
AllDATA_cleaned <- AllDATA[ , c("PlotID","Red", "Green", "Blue", "RedEdge", "NIR","BI","GLI","NGRDI","VARI","BGI","NDVI","Pedigree","Exp_row","Exp_range")]
AllDATA_cleaned
write.csv(AllDATA_cleaned, file = x)
corr <- cor.test(x=AllDATA$NDVI_agisoft, y=AllDATA$NDVI_pix4d, method = 'spearman')
# Indices file name
x <- "210622_Indices_newbands_correct.csv"
write.csv(AllDATA_cleaned, file = x)
View(AllDATA_cleaned)
# name of the file that is being graphed
x <- "210622_Indices_newbands_correct.csv"
###############################################################################
########################CREATING HEAT MAPS FOR DATE X##########################
###############################################################################
df <- read.csv(x, header = TRUE, sep = ",")
# Graph heatmap of NDVI
ggplot(df, aes(x = QGIS_rows, y = QGIS_range, fill = NDVI)) +
geom_tile(color = "black") +
geom_tile() +
xlab(label = "Row") +
ylab(label = "Range") +
scale_fill_viridis_c(limits=c(-1, 1), breaks=seq(-1,1,by=0.2)) +
guides( fill = guide_colourbar(barwidth = 0.5,
barheight = 20)) +
theme_gray(base_size = 24)+
theme(#axis.title.x = element_blank(),
legend.position = '')
library(ggplot2)
# Graph heatmap of NDVI
ggplot(df, aes(x = QGIS_rows, y = QGIS_range, fill = NDVI)) +
geom_tile(color = "black") +
geom_tile() +
xlab(label = "Row") +
ylab(label = "Range") +
scale_fill_viridis_c(limits=c(-1, 1), breaks=seq(-1,1,by=0.2)) +
guides( fill = guide_colourbar(barwidth = 0.5,
barheight = 20)) +
theme_gray(base_size = 24)+
theme(#axis.title.x = element_blank(),
legend.position = '')
View(df)
# Graph heatmap of NDVI
ggplot(df, aes(x = Exp_row, y = Exp_range, fill = NDVI)) +
geom_tile(color = "black") +
geom_tile() +
xlab(label = "Row") +
ylab(label = "Range") +
scale_fill_viridis_c(limits=c(-1, 1), breaks=seq(-1,1,by=0.2)) +
guides( fill = guide_colourbar(barwidth = 0.5,
barheight = 20)) +
theme_gray(base_size = 24)+
theme(#axis.title.x = element_blank(),
legend.position = '')
